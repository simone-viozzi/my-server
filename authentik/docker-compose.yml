---

services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - authentik-database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
      PGDATA: /var/lib/postgresql/data/db
    env_file:
      - .env
    networks:
      - local


  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - authentik-redis:/data
    networks:
      - local

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.8.3}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    labels:
      traefik.enable: "true"
      traefik.docker.network: proxy

      # Router configuration
      traefik.http.routers.authentik.rule: "Host(`${AUTHENTIK_DOMAIN}`)"
      traefik.http.routers.authentik.entrypoints: "websecure"
      traefik.http.routers.authentik.tls: "true"
      traefik.http.routers.authentik.tls.certresolver: "leresolver"

      # Service configuration
      traefik.http.routers.authentik.service: "authentik-svc"
      traefik.http.services.authentik-svc.loadbalancer.server.port: "9000"

      # Optional HSTS header
      #traefik.http.middlewares.authentik.headers.stsSeconds: 63072000
      #traefik.http.middlewares.authentik.headers.stsIncludeSubdomains: "true"
      #traefik.http.middlewares.authentik.headers.stsPreload: "true"
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    networks:
      - proxy
      - local


  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.8.3}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    networks:
      - local

  authentik-proxy:
    image: ghcr.io/goauthentik/proxy
    container_name: authentik-proxy
    networks:
      - proxy
      - local
    ports:
      - "9000:9000"
      - "9443:9443"
    environment:
      AUTHENTIK_HOST: "https://${AUTHENTIK_DOMAIN}"
      AUTHENTIK_INSECURE: "false"
      AUTHENTIK_TOKEN: "${AUTHENTIK_TOKEN}"
      # Uncomment and configure if needed
      # AUTHENTIK_HOST_BROWSER: "https://${EXTERNAL_DOMAIN}"
    labels:
      traefik.enable: "true"
      traefik.docker.network: proxy
      traefik.http.routers.authentik-proxy.rule: "Host(`${AUTHENTIK_OUTPOST_DOMAIN}`)"
      traefik.http.routers.authentik-proxy.entrypoints: "websecure"
      traefik.http.routers.authentik-proxy.tls: "true"
      traefik.http.routers.authentik-proxy.tls.certresolver: "leresolver"

      traefik.http.routers.authentik-proxy.service: "authentik-proxy-svc"
      traefik.http.services.authentik-proxy-svc.loadbalancer.server.port: "9000"

      traefik.http.middlewares.authentik.forwardauth.address: "http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik"
      traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true
      traefik.http.middlewares.authentik.forwardauth.authRequestHeaders: "X-Authentik-Redirect"
      traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: "X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"

    restart: unless-stopped

volumes:
  authentik-database:
    external: true
  authentik-redis:
    driver: local

networks:
  proxy:
    external: true
  local:
