services:

  paperless_broker:
    container_name: paperless_broker
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - redisdata:/data
    networks:
      internal:

  paperless_db:
    container_name: paperless_db
    image: docker.io/library/postgres:15
    restart: unless-stopped
    volumes:
      - paperless-pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    networks:
      internal:

  paperless_webserver:
    container_name: paperless-webserver
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    user: 1000:1000
    restart: unless-stopped
    depends_on:
      - paperless_db
      - paperless_broker
      - paperless_gotenberg
      - paperless_tika
    ports:
      - "8150:8000"
    networks:
      proxy:
      internal:
      homepage-net:
    volumes:
      - ./logs:/usr/src/paperless/data/log
      - paperless-data:/usr/src/paperless/data
      - paperless-media:/usr/src/paperless/media
      - ./export:/usr/src/paperless/export
      - ./paperless:/usr/src/paperless/consume
    env_file: .env
    environment:
      PAPERLESS_REDIS: redis://paperless_broker:6379
      PAPERLESS_DBHOST: paperless_db
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless_gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://paperless_tika:9998
    labels:
      traefik.enable: "true"
      traefik.docker.network: proxy

      traefik.http.routers.paperless.rule: "Host(`${PAPERLESS_DOMAIN}`)"
      traefik.http.routers.paperless.entryPoints: websecure

      traefik.http.routers.paperless.tls: "true"
      traefik.http.routers.paperless.tls.certResolver: leresolver

      traefik.http.routers.paperless.service: paperless-svc
      traefik.http.services.paperless-svc.loadbalancer.server.port: "8000"

      homepage.group: Media
      homepage.name: Paperless-ngx
      homepage.icon: paperless-ngx.svg
      homepage.href: https://${PAPERLESS_DOMAIN}
      homepage.widget.type: paperlessngx
      homepage.widget.url: http://paperless-webserver:8000
      homepage.widget.key: ${PAPERLESS_TOKEN}
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5

  paperless_gotenberg:
    container_name: paperless_gotenberg
    image: docker.io/gotenberg/gotenberg:7.8
    restart: unless-stopped

    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    networks:
      internal:

  paperless_tika:
    container_name: paperless_tika
    image: ghcr.io/paperless-ngx/tika:latest
    networks:
      - internal
    restart: unless-stopped


  change-vol-ownership:
    # We can use any image we want as long as we can chown
    image: ubuntu
    # Need a user priviliged enough to chown
    user: "root"
    # Specify the group in question
    group_add:
      - '1000'
    volumes:
      # The volume to chown
      - paperless-media:/tmp/change-ownership/1
      - paperless-data:/tmp/change-ownership/2
    command: chown -R 1000:1000 /tmp/change-ownership

networks:
  proxy:
    external: true
  internal:
  homepage-net:
    external: true

volumes:
  paperless-data:
    external: true
  paperless-media:
    external: true
  paperless-pgdata:
    external: true
  redisdata:
