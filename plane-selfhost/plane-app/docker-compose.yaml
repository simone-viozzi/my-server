x-db-env: &db-env
  PGHOST: ${PGHOST:-plane-db}
  PGDATABASE: ${PGDATABASE:-plane}
  POSTGRES_USER: ${POSTGRES_USER:-plane}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-plane}
  POSTGRES_DB: ${POSTGRES_DB:-plane}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  PGDATA: ${PGDATA:-/var/lib/postgresql/data}

x-redis-env: &redis-env
  REDIS_HOST: ${REDIS_HOST:-plane-redis}
  REDIS_PORT: ${REDIS_PORT:-6379}
  REDIS_URL: ${REDIS_URL:-redis://plane-redis:6379/}

x-minio-env: &minio-env
  MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID:-access-key}
  MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY:-secret-key}

x-aws-s3-env: &aws-s3-env
  AWS_REGION: ${AWS_REGION:-}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-access-key}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-secret-key}
  AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL:-http://plane-minio:9000}
  AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-uploads}

x-proxy-env: &proxy-env
  NGINX_PORT: ${NGINX_PORT:-80}
  BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-uploads}
  FILE_SIZE_LIMIT: ${FILE_SIZE_LIMIT:-5242880}

x-mq-env: &mq-env # RabbitMQ Settings
  RABBITMQ_HOST: ${RABBITMQ_HOST:-plane-mq}
  RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
  RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-plane}
  RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-plane}
  RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-plane}
  RABBITMQ_VHOST: ${RABBITMQ_VHOST:-plane}

x-live-env: &live-env
  API_BASE_URL: ${API_BASE_URL:-http://api:8000}

x-app-env: &app-env
  WEB_URL: ${WEB_URL:-http://localhost}
  DEBUG: ${DEBUG:-0}
  SENTRY_DSN: ${SENTRY_DSN}
  SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-production}
  CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
  GUNICORN_WORKERS: 1
  USE_MINIO: ${USE_MINIO:-1}
  DATABASE_URL: ${DATABASE_URL:-postgresql://plane:plane@plane-db/plane}
  SECRET_KEY: ${SECRET_KEY:-60gp0byfz2dvffa45cxl20p1scy9xbpf6d8c5y0geejgkyp1b5}
  AMQP_URL: ${AMQP_URL:-amqp://plane:plane@plane-mq:5672/plane}
  API_KEY_RATE_LIMIT: ${API_KEY_RATE_LIMIT:-60/minute}
  MINIO_ENDPOINT_SSL: ${MINIO_ENDPOINT_SSL:-0}

services:
  web:
    image: ${DOCKERHUB_USER:-makeplane}/plane-frontend:${APP_RELEASE:-stable}
    command: node web/server.js web
    deploy:
      replicas: ${WEB_REPLICAS:-1}
      restart_policy:
        condition: on-failure
    depends_on:
      - api
      - worker
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "50m"
        max-file: "5"

  space:
    image: ${DOCKERHUB_USER:-makeplane}/plane-space:${APP_RELEASE:-stable}
    command: node space/server.js space
    deploy:
      replicas: ${SPACE_REPLICAS:-1}
      restart_policy:
        condition: on-failure
    depends_on:
      - api
      - worker
      - web
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "50m"
        max-file: "5"

  admin:
    image: ${DOCKERHUB_USER:-makeplane}/plane-admin:${APP_RELEASE:-stable}
    command: node admin/server.js admin
    deploy:
      replicas: ${ADMIN_REPLICAS:-1}
      restart_policy:
        condition: on-failure
    depends_on:
      - api
      - web
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "50m"
        max-file: "5"

  live:
    image: ${DOCKERHUB_USER:-makeplane}/plane-live:${APP_RELEASE:-stable}
    command: node live/dist/server.js live
    environment:
      <<: [*live-env]
    deploy:
      replicas: ${LIVE_REPLICAS:-1}
      restart_policy:
        condition: on-failure
    depends_on:
      - api
      - web
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "50m"
        max-file: "5"

  api:
    image: ${DOCKERHUB_USER:-makeplane}/plane-backend:${APP_RELEASE:-stable}
    command: ./bin/docker-entrypoint-api.sh
    deploy:
      replicas: ${API_REPLICAS:-1}
      restart_policy:
        condition: on-failure
    volumes:
      - logs_api:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - plane-db
      - plane-redis
      - plane-mq
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "50m"
        max-file: "5"


  worker:
    image: ${DOCKERHUB_USER:-makeplane}/plane-backend:${APP_RELEASE:-stable}
    command: ./bin/docker-entrypoint-worker.sh
    deploy:
      replicas: ${WORKER_REPLICAS:-1}
      restart_policy:
        condition: on-failure
    volumes:
      - logs_worker:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - api
      - plane-db
      - plane-redis
      - plane-mq
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "50m"
        max-file: "5"

  beat-worker:
    image: ${DOCKERHUB_USER:-makeplane}/plane-backend:${APP_RELEASE:-stable}
    command: ./bin/docker-entrypoint-beat.sh
    deploy:
      replicas: ${BEAT_WORKER_REPLICAS:-1}
      restart_policy:
        condition: on-failure
    volumes:
      - logs_beat-worker:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - api
      - plane-db
      - plane-redis
      - plane-mq
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "5"

  migrator:
    image: ${DOCKERHUB_USER:-makeplane}/plane-backend:${APP_RELEASE:-stable}
    command: ./bin/docker-entrypoint-migrator.sh
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - logs_migrator:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - plane-db
      - plane-redis
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "2"

  # Comment this if you already have a database running
  plane-db:
    image: postgres:15.7-alpine
    command: postgres -c 'max_connections=1000'
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      <<: *db-env
    volumes:
      - plane-db:/var/lib/postgresql/data
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "50m"
        max-file: "5"

  plane-redis:
    image: valkey/valkey:7.2.5-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - redisdata:/data
    logging:
      driver: "local"
      options:
        max-size: "5m"
        max-file: "2"

  plane-mq:
    image: rabbitmq:3.13.6-management-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      <<: *mq-env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    logging:
      driver: "local"
      options:
        max-size: "5m"
        max-file: "2"

  # Comment this if you using any external s3 compatible storage
  plane-minio:
    image: minio/minio:latest
    command: server /export --console-address ":9090"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      <<: *minio-env
    volumes:
      - plane-uploads:/export
    networks:
      - local
    logging:
      driver: "local"
      options:
        max-size: "5m"
        max-file: "2"

  # Comment this if you already have a reverse proxy running
  proxy:
    image: ${DOCKERHUB_USER:-makeplane}/plane-proxy:${APP_RELEASE:-stable}
    environment:
      <<: *proxy-env
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - web
      - api
      - space
    networks:
      - proxy
      - local
    labels:
      traefik.enable: "true"
      traefik.docker.network: "proxy"
      traefik.http.routers.plane.rule: "Host(`${APP_BASE_URL_}`)"
      traefik.http.routers.plane.entrypoints: websecure
      traefik.http.routers.plane.tls: "true"
      traefik.http.routers.plane.tls.certresolver: "leresolver"
      traefik.http.services.plane.loadbalancer.server.port: "80"

      homepage.group: Other
      homepage.name: Plane
      homepage.icon: plane.svg
      homepage.href: https://${APP_BASE_URL_}
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "5"

volumes:
  plane-db:
    external: true
  redisdata:
  plane-uploads:
    external: true
  logs_api:
  logs_worker:
  logs_beat-worker:
  logs_migrator:
  rabbitmq_data:

networks:
  proxy:
    external: true
  local:
